I conclude that there are two ways of constructing a software design: One way is to make it so simple that there are obviously no deficiencies and the other way is to make it so complicated that there are no obvious deficiencies. 

The first method is far more difficult. It demands the same skill, devotion, insight, and even inspiration as the discovery of the simple physical laws which underlie the complex phenomena of nature. It also requires a willingness to accept objectives which are limited by physical, logical, and technological constraints, and to accept a compromise when conflicting objectives cannot be met. No committee will ever do this until it is too late. 

	-- C.A.R. Hoare, "The Emporor's Old Clothes"
	   Communications of the ACM, 1981
%
If you can't write a function to determine if a given integral input is odd in under 10 seconds, you're either a crappy typist or *you shouldn't be programming*.

	-- Brook Monroe, https://medium.com/p/b0b09bb11798/
